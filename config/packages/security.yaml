security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            migrate_from: [legacy]

        legacy:
            algorithm:        sha512
            encode_as_base64: false
            iterations:       1

    providers:
        packagist:
            id: Packeton\Security\Provider\UserProvider

        all_users:
            chain:
                providers: ['packagist']

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        packages:
            pattern: (^(.+\.json$|/p/|/mirror/|/zipball/|/feeds/.+(\.rss|\.atom)|/packages/[A-Za-z0-9_.-]+/[A-Za-z0-9_.-]+?(\.json|/changelog)|/packages/list\.json|/packages/upload/|/downloads/|/api/))+
            api_basic:
                provider: all_users
            stateless: true
            context: main
            user_checker: Packeton\Security\UserChecker

        main:
            lazy: true
            pattern:      .*
            user_checker: Packeton\Security\UserChecker
            provider: all_users
            custom_authenticators:
                - Packeton\Integrations\Security\OAuth2Authenticator
            '%default_login_provider%': '%default_login_options%'

            remember_me:
                secret: '%env(APP_SECRET)%'
                user_providers: all_users
                name: pauth
                samesite: 'lax'
                lifetime: 31104000 # 1y
            logout:       true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # The WDT has to be allowed to anonymous users to avoid requiring the login with the AJAX request
        - { path: ^/_wdt/, roles: PUBLIC_ACCESS }
        - { path: ^/_profiler/, roles: PUBLIC_ACCESS }

        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: (^(/login/|/oauth2/))+, roles: PUBLIC_ACCESS }
        - { path: ^/reset-password, roles: PUBLIC_ACCESS }
        - { path: ^/api/healthz, roles: PUBLIC_ACCESS }

        # Packagist
        - { path: (^(/change-password|/profile|/logout|/subrepository/))+, roles: ROLE_USER }
        - { path: (^(/search|/packages/|/versions/))+, roles: ROLE_USER, allow_if: "is_granted('PACKETON_PUBLIC')" }
        - { path: ^/mirror/, roles: ROLE_USER, allow_if: "is_granted('PACKETON_MIRROR_PUBLIC')" }
        - { path: (^(/packages.json$|/p/|/p2/|/downloads/))+, roles: ROLE_USER, allow_if: "is_granted('PACKETON_PUBLIC')" }
        - { path: (^(/zipball/))+, roles: ROLE_USER, allow_if: "is_granted('PACKETON_ARCHIVE_PUBLIC')" }
        - { path: (^(/api/webhook-invoke/))+, roles: ROLE_USER }
        - { path: (^(/api/(create-package|update-package|github|bitbucket)|/apidoc|/about))$, roles: ROLE_MAINTAINER }
        - { path: ^/$, roles: ROLE_USER, allow_if: "is_granted('PACKETON_PUBLIC')" }

        # Maintainers
        - { path: (^(/users/(.+)/packages))+, roles: ROLE_MAINTAINER }
        - { path: (^(/users/(.+)/favorites))+, roles: ROLE_MAINTAINER }
        - { path: (^(/metadata/changes.json$|/explore|/jobs/|/archive/|/api/hooks/))+, roles: ROLE_MAINTAINER }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^.*$, roles: ROLE_ADMIN }

    role_hierarchy:
        ROLE_UPDATE_PACKAGES: ~
        ROLE_DELETE_PACKAGES: ~
        ROLE_EDIT_PACKAGES: ~

        ROLE_FULL_CUSTOMER: [ ROLE_USER ] # Access to all packages without ACL group restriction
        ROLE_MAINTAINER:  [ ROLE_FULL_CUSTOMER, ROLE_USER, ROLE_UPDATE_PACKAGES ]
        ROLE_ADMIN:       [ ROLE_MAINTAINER, ROLE_EDIT_PACKAGES, ROLE_DELETE_PACKAGES ]
        ROLE_SUPERADMIN:  [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
